<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈malloc函数与二级指针的使用</title>
    <link href="/2022/02/28/note_C_1/"/>
    <url>/2022/02/28/note_C_1/</url>
    
    <content type="html"><![CDATA[<h2 id="课内问题"><a href="#课内问题" class="headerlink" title="课内问题"></a>课内问题</h2><p>上课时老师提到了一个经典的问题，即把一个二维数组名直接赋值给一个二级指针会引发的问题：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">include&lt;stdio.h&gt;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> **q;<br>    q = a;  <span class="hljs-comment">//此处会报错</span><br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实际原因是因为二级指针p与二维数组名a并不是同一种数据类型，C语言中并没有多维数组的概念，而是以“数组的数组”方式来实现多维数组。对于二维数组a，是将数组作为数组元素进行储存。</p><p>接着老师提问，<strong>如何将二维数组赋值给二级指针</strong></p><p>于是想到了如下两种方法：  </p><ol><li>声明一个指针数组：  <figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">int</span> *temp[<span class="hljs-number">3</span>] = &#123;a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>]&#125;;<span class="hljs-comment">//依次获取二维数组的“每一行”</span><br>p = temp;<br></code></pre></div></td></tr></table></figure></li><li>采用malloc函数进行内存分配：<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">p = (<span class="hljs-type">int</span>** )<span class="hljs-built_in">malloc</span>(<span class="hljs-number">3</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*));<span class="hljs-comment">//初始化二级指针 </span><br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fail to malloc!&quot;</span>);<span class="hljs-comment">//注意判断未成功分配内存的情况</span><br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>&#123;<br>*(p + i) = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//为每一个一级指针分配内存 </span><br>    <span class="hljs-keyword">if</span> (*(p + i) == <span class="hljs-literal">NULL</span>) <br>    &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fail to malloc!&quot;</span>);<span class="hljs-comment">//同上</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>*(p + i) = a[i];<span class="hljs-comment">//依次赋值 </span><br>&#125;<br>...<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">3</span>;i++)<br>&#123;<br><span class="hljs-built_in">free</span>(*(p + i));<span class="hljs-comment">//注意释放内存以免数据泄露，先依次释放每个一级指针</span><br>&#125;<br><span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//释放二级指针</span><br></code></pre></div></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2>然后想到了使用函数和二级指针为字符串数组间接分配内存:  <h3 id="定义函数MyMalloc"><a href="#定义函数MyMalloc" class="headerlink" title="定义函数MyMalloc"></a>定义函数MyMalloc</h3><strong>形参必须使用二级指针</strong><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">//用于间接分配内存</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">MyMalloc</span><span class="hljs-params">(<span class="hljs-type">char</span> **ptr,<span class="hljs-type">int</span> size)</span><br>&#123;<br>    <span class="hljs-type">char</span>* temp = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span>(ptr == <span class="hljs-literal">NULL</span>)<span class="hljs-comment">//判断二级指针ptr是否成功指向pStr</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    temp = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>));<span class="hljs-comment">//申请内存</span><br>    <span class="hljs-keyword">if</span>(temp == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    *ptr = temp;<span class="hljs-comment">//由于ptr指向pStr，所以此式等价于pStr = temp，即成功指向分配的内存</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="使用函数MyMalloc"><a href="#使用函数MyMalloc" class="headerlink" title="使用函数MyMalloc"></a>使用函数MyMalloc</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> *pStr = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> buffer = <span class="hljs-number">20</span>;<br>    MyMalloc(&amp;pStr,buffer);<span class="hljs-comment">//注意实参是&quot;&amp;pStr&quot;，让形参ptr指向pStr</span><br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure>若使用一级指针作为形参，会导致无法正确分配内存。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ol><ul><li>二级指针需要使用malloc函数初始化分配内存以便使用。</li><li>不能想当然，有疑惑就敲出来看看，善用监视功能。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>摆隙碎笔</title>
    <link href="/2022/02/27/%E6%91%86%E9%9A%99%E7%A2%8E%E7%AC%94/"/>
    <url>/2022/02/27/%E6%91%86%E9%9A%99%E7%A2%8E%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<p>个人网站的搭建要比想象中的<del>简单</del>，我也搞不清楚我做这些是为了什么，也许动力只是想耍耍帅吧，就没头苍蝇似的学，总是大概会了就搁浅，慵懒而迷茫，开学却已经迫在眉睫了。<br>日常的事杂七杂八，虽然会有焦虑和苦恼，甚至有时会有恐慌，但更多的是甘醇甜美，这是我的第一篇日志，私人又不算私人，计划又好像散文，纯音乐的潺潺流水声让我平静而又思绪飞扬。  </p><blockquote><p>创作第一，体验第二，避免繁杂，简洁为上！</p></blockquote><p>这是今日学习Hexo博客美化时博主Bob的话。过度的思考与苛求完美只会带来仿生一般的怪异感。<br>接下算是一些简单的规划吧：  </p><ul><li>跟上学校课程，数学物理英语不能落下</li><li>OOP、数据结构、算法总得跟着学吧</li><li>自主尝试做一些Lab</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
